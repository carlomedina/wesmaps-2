scale_fill_cyclical(values = c("#ba0c2f", "black")) +
scale_color_cyclical(values = c("blue", "green")) +
facet_wrap(~building, ncol = 10) +
theme_classic() +
theme(plot.title = element_text(size = 20, face = "bold", family = "Source Sans Pro"),
axis.title = element_text(size = 14, face = "bold", family = "Source Sans Pro"),
axis.title.x = element_text(margin = margin(t = 20, l = 20)),
legend.title = element_text(size = 14, face = "bold", hjust = 1, family = "Source Sans Pro"),
legend.position = "bottom")
#### by major classes ####
counts_day_time_major <- data_fall %>%
mutate(major = str_replace(id, "[0-9-]+$", "") %>% str_trim(),
day = factor(day,
c("m", "t", "w", "r", "f"),
c("m", "t", "w", "r", "f"),
ordered = T)) %>%
group_by(day, start, end, major) %>%
summarise(count = sum(enrolled)) %>%
arrange(day, start, major) %>%
ungroup() %>%
mutate(start = paste(Sys.Date(), start) %>% ymd_hm(),
end = paste(Sys.Date(), end) %>% ymd_hm())
### total_counts
top_major_list <- counts_day_time_major %>%
group_by(major) %>%
summarise(count = sum(count)) %>%
arrange(desc(count)) %$%
head(major, 10)
counts_day_time_major %>%
filter(major %in% top_major_list) %>%
mutate(major = factor(major, rev(top_major_list), rev(top_major_list), ordered = T),
day = factor(day, c("m", "t", "w", "r", "f"), c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), ordered = T)) %>%
ggplot() +
geom_segment(aes(x = start, xend = end, y = major, yend = major, size = count), color = "#ba0c2f", alpha = 0.3) +
scale_size_continuous(range = c(1, 15) ) +
scale_x_datetime() +
facet_wrap(~day, ncol = 5) +
theme_classic() +
labs(title = "Top 10 major classes with the greatest traffic",
subtitle = "Source: WesMaps",
y = "Major",
x = "Time",
size = "Volume") +
theme(plot.title = element_text(size = 20, face = "bold", family = "Source Sans Pro"),
axis.title = element_text(size = 14, face = "bold", family = "Source Sans Pro"),
axis.title.x = element_text(margin = margin(t = 20, l = 20)),
legend.title = element_text(size = 14, face = "bold", hjust = 1, family = "Source Sans Pro"),
legend.position = "bottom")
wes <- read_html("www.wesleyan.edu")
library(rvest)
wes <- read_html("www.wesleyan.edu")
wes <- read_html("http://www.wesleyan.edu")
wes %>% print()
wes %>% html_text() %>% print()
wes <- read_html("http://calendar.wesleyan.edu")
wes %>% html_text() %>% print()
wes %>% html_text() %>% write_file("~/temp.txt")
calendar <- read_html("http://eaglet.wesleyan.edu/MasterCalendar/iCalFeed.aspx?data=cr7N8e0fDWNjP%2btgb2leSQknEQLeOROtX%2biFGn9Jorc%3d")
calendar %>% read_text()
calendar %>% html_text()
calendar <- read_html("http://eaglet.wesleyan.edu/MasterCalendar/iCalFeed.aspx?data=cr7N8e0fDWNjP%2btgb2leSQknEQLeOROtX%2biFGn9Jorc%3d")
calendar %>% read_text()
calendar %>% html_text()
library(tidyverse)
library(magrittr)
library(lubridate)
library(migest)
library(network)
library(ggraph)
library(igraph)
library(circlize)
library(cowplot)
# load helper functions
source("02-management.R")
flowplot <- function(mat) {
{# a little convoluted. needs refactoring
g <- graph_from_adjacency_matrix(mat, mode = "directed", weighted = T)
edgelist <- get.edgelist(g) %>%
as.tibble() %>%
rename(from = V1, to = V2) %>%
mutate(from = factor(from),
to = factor(to),
fromindex = as.numeric(from),
toindex = as.numeric(to)) %>%
mutate(weight = E(g)$weight) %>%
arrange(from, to) %>%
group_by(from) %>%
mutate(curvature = seq(from = 0.5, by = 0.2, length.out = n()))
g <- graph_from_data_frame(edgelist)
E(g)$curvature = edgelist$curvature
E(g)$weight = edgelist$weight
}
# flow plot
p1 <- ggraph(g, layout = 'lgl') +
geom_edge_arc(aes(color = ..index.., width = weight),
curvature = 1) +
scale_edge_width(range = c(0.5, 5)) +
geom_node_text(aes(label = name)) +
theme_graph() +
theme(legend.position = "none") +
labs(edge_width = "Volume")
mat %>%
melt() %>%
rename(from = Var1, to = Var2) -> heatmap_dat
fourthroot_trans = function() trans_new("fourthroot", function(x) x^(0.25), function(x) x^(0.25))
p2 <- ggplot(heatmap_dat) +
geom_tile(aes(to, from, fill = value), alpha = 0.8, color = "white", size = 0.5) +
theme_classic() +
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 0, colour = "grey50"),
axis.title.x = element_text(hjust = 1, margin = margin(t = -15, unit = "pt"), size = 12),
axis.title.y = element_text(hjust = 1, margin = margin(b = 50, unit = "pt"), size = 12)) +
scale_fill_viridis(trans = fourthroot_trans()) +
scale_x_discrete(position = "top") +
scale_color_discrete(na.value = "white") +
guides(alpha = FALSE) +
coord_fixed() +
labs(fill = "Relative counts",
x = "Destination",
y = "Origin")
title <- cowplot::ggdraw() +
cowplot::draw_label(sprintf("Student movement between %s and %s", NULL, NULL), fontface='bold', hjust = 1, size = 16)
cowplot::plot_grid(p1, p2, ncol = 2, rel_widths = c(0.3, 0.8), scale = c(1,1)) %>%
{cowplot::plot_grid(title, ., ncol = 1, rel_heights = c(0.1, 1), rel_widths = c(1, 1))}
}
{
data <-  read_csv("./data/wesmaps_1169.csv")
m <- data %>%
clean_data_semester("Fall") %>%
count_volume_by_day_time(top_n = 10) %>%
standardize_counts() %>%
get_entry_exit_counts() %>%
get_entry_exit_counts_window("10:15am") %>%
estimate_flow()
}
m %>%
flowplot()
library(reshape2)
m %>%
flowplot()
library(scales)
m %>%
flowplot()
View(data)
colnames(m)
buildings <- read_csv("./data/building_location.csv")
colnames(m)
View(buildings)
View(m)
# load helper functions
source("02-management.R")
flowplot <- function(mat) {
{# a little convoluted. needs refactoring
g <- graph_from_adjacency_matrix(mat, mode = "directed", weighted = T)
edgelist <- get.edgelist(g) %>%
as.tibble() %>%
rename(from = V1, to = V2) %>%
mutate(from = factor(from),
to = factor(to),
fromindex = as.numeric(from),
toindex = as.numeric(to)) %>%
mutate(weight = E(g)$weight) %>%
arrange(from, to) %>%
group_by(from) %>%
mutate(curvature = seq(from = 0.5, by = 0.2, length.out = n()))
g <- graph_from_data_frame(edgelist)
E(g)$curvature = edgelist$curvature
E(g)$weight = edgelist$weight
}
# flow plot
p1 <- ggraph(g, layout = 'lgl') +
geom_edge_arc(aes(color = ..index.., width = weight),
curvature = 1) +
scale_edge_width(range = c(0.5, 5)) +
geom_node_text(aes(label = name)) +
theme_graph() +
theme(legend.position = "none") +
labs(edge_width = "Volume")
mat %>%
melt() %>%
rename(from = Var1, to = Var2) -> heatmap_dat
fourthroot_trans = function() trans_new("fourthroot", function(x) x^(0.25), function(x) x^(0.25))
p2 <- ggplot(heatmap_dat) +
geom_tile(aes(to, from, fill = value), alpha = 0.8, color = "white", size = 0.5) +
theme_classic() +
theme(legend.position = "right",
axis.text.x = element_text(angle = 45, hjust = 0, colour = "grey50"),
axis.title.x = element_text(hjust = 1, margin = margin(t = -15, unit = "pt"), size = 12),
axis.title.y = element_text(hjust = 1, margin = margin(b = 50, unit = "pt"), size = 12)) +
scale_fill_viridis(trans = fourthroot_trans()) +
scale_x_discrete(position = "top") +
scale_color_discrete(na.value = "white") +
guides(alpha = FALSE) +
coord_fixed() +
labs(fill = "Relative counts",
x = "Destination",
y = "Origin")
title <- cowplot::ggdraw() +
cowplot::draw_label(sprintf("Student movement between %s and %s", NULL, NULL), fontface='bold', hjust = 1, size = 16)
cowplot::plot_grid(p1, p2, ncol = 2, rel_widths = c(0.3, 0.8), scale = c(1,1)) %>%
{cowplot::plot_grid(title, ., ncol = 1, rel_heights = c(0.1, 1), rel_widths = c(1, 1))}
}
m <- data %>%
clean_data_semester("Fall") %>%
count_volume_by_day_time(top_n = 10) %>%
standardize_counts() %>% .$building %>% unique()
data %>%
clean_data_semester("Fall") %>%
count_volume_by_day_time(top_n = 10) %>%
standardize_counts() %>% .$building %>% unique()
m <- data %>%
clean_data_semester("Fall") %>%
count_volume_by_day_time(top_n = 10) %>%
standardize_counts() %>%
get_entry_exit_counts() %>%
get_entry_exit_counts_window("10:15am") %>%
estimate_flow()
data %>%
clean_data_semester("Fall")
?gsub
# add id
data_with_id <- data %>%
mutate(id = paste0(code, "-", section))
merge(disentangle_time_loc(data),
data_with_id %>%
select(id, ispoi, maxcap, available, sem),
by = "id") %>%
filter(grepl(semester, sem)) %>%
mutate(enrolled = maxcap - available,
location = ifelse(grepl("PHED", id), "FAC", location), # for PE classes, change location to Freeman
location = ifelse(gsub(" .*", "", location)), # remove room names after spaces
location = ifelse(grepl("FILM", id), "CFS", location)  # for FILM classes, change location to CFS
)
semester = "Fall"
merge(disentangle_time_loc(data),
data_with_id %>%
select(id, ispoi, maxcap, available, sem),
by = "id") %>%
filter(grepl(semester, sem)) %>%
mutate(enrolled = maxcap - available,
location = ifelse(grepl("PHED", id), "FAC", location), # for PE classes, change location to Freeman
location = ifelse(gsub(" .*", "", location)), # remove room names after spaces
location = ifelse(grepl("FILM", id), "CFS", location)  # for FILM classes, change location to CFS
)
# load helper functions
source("02-management.R")
data %>%
clean_data_semester("Fall")
m <- data %>%
clean_data_semester("Fall") %>%
count_volume_by_day_time(top_n = 10) %>%
standardize_counts() %>%
get_entry_exit_counts() %>%
get_entry_exit_counts_window("10:15am") %>%
estimate_flow()
data %>%
clean_data_semester("Fall") %>%
count_volume_by_day_time(top_n = 10) %>% .$building %>% unique()
is.null(10)
by = "building"
top_n = 10
mutate(data,
building = str_replace(location, "[0-9]+.*$", "") %>% str_trim(),
day = factor(day,
c("m", "t", "w", "r", "f"),
c("m", "t", "w", "r", "f"),
ordered = T)) %>%
group_by(day, start, end, building) %>%
summarise(count = sum(enrolled)) %>%
arrange(day, start, building) %>%
ungroup() %>%
mutate(start = paste(Sys.Date(), start) %>% ymd_hm(),
end = paste(Sys.Date(), end) %>% ymd_hm()) -> intermediate
data %>%
clean_data_semester("Fall") -> data
mutate(data,
building = str_replace(location, "[0-9]+.*$", "") %>% str_trim(),
day = factor(day,
c("m", "t", "w", "r", "f"),
c("m", "t", "w", "r", "f"),
ordered = T)) %>%
group_by(day, start, end, building) %>%
summarise(count = sum(enrolled)) %>%
arrange(day, start, building) %>%
ungroup() %>%
mutate(start = paste(Sys.Date(), start) %>% ymd_hm(),
end = paste(Sys.Date(), end) %>% ymd_hm()) -> intermediate
if (!is.null(top_n)) {
top_list <- intermediate %>%
group_by(building) %>%
summarise(count = sum(count)) %>%
arrange(desc(count)) %$%
head(building, top_n)
intermediate %>%
filter(building %in% top_list) %>%
print()
}
intermediate %>% unique(.$building)
intermediate %>% .$building %>% unique()
intermediate %>%
filter(building %in% top_list) -> x
x %>% .$building %>% unique()
# input: data - the one that is outputed by clean_data_semester
#         by - either major or building
#         top_n - top n major or building based on total counts. if NULL return all
# return: data frame of counts by day and time, either by building or major
#         (showing the top_n of building or major)
count_volume_by_day_time <- function(data, by = "building", top_n = 10) {
# TODO: refactor by finding a way to call in the by
# variable in the group_by & arrange  statement
if (by == "building") {
mutate(data,
building = str_replace(location, "[0-9]+.*$", "") %>% str_trim(),
day = factor(day,
c("m", "t", "w", "r", "f"),
c("m", "t", "w", "r", "f"),
ordered = T)) %>%
group_by(day, start, end, building) %>%
summarise(count = sum(enrolled)) %>%
arrange(day, start, building) %>%
ungroup() %>%
mutate(start = paste(Sys.Date(), start) %>% ymd_hm(),
end = paste(Sys.Date(), end) %>% ymd_hm()) -> intermediate
if (!is.null(top_n)) {
top_list <- intermediate %>%
group_by(building) %>%
summarise(count = sum(count)) %>%
arrange(desc(count)) %$%
head(building, top_n)
intermediate %>%
filter(building %in% top_list) %>%
return()
}
} else if (by == "major") {
mutate(data,
major = str_replace(id, "[0-9-]+$", "") %>% str_trim(),
day = factor(day,
c("m", "t", "w", "r", "f"),
c("m", "t", "w", "r", "f"),
ordered = T)) %>%
group_by(day, start, end, major) %>%
summarise(count = sum(enrolled)) %>%
arrange(day, start, major) %>%
ungroup() %>%
mutate(start = paste(Sys.Date(), start) %>% ymd_hm(),
end = paste(Sys.Date(), end) %>% ymd_hm()) -> intermediate
if (!is.null(top_n)) {
top_list <- intermediate %>%
group_by(major) %>%
summarise(count = sum(count)) %>%
arrange(desc(count)) %$%
head(major, top_n)
intermediate %>%
filter(major %in% top_list) %>%
return()
}
}
if (is.null(top_n)) {
return(intermediate)
}
}
count_volume_by_day_time(data) -> x
x %>% .$building %>% unique()
# input: data - the one that is outputed by clean_data_semester
#         by - either major or building
#         top_n - top n major or building based on total counts. if NULL return all
# return: data frame of counts by day and time, either by building or major
#         (showing the top_n of building or major)
count_volume_by_day_time <- function(data, by = "building", top_n = 10) {
# TODO: refactor by finding a way to call in the by
# variable in the group_by & arrange  statement
if (by == "building") {
mutate(data,
building = str_replace(location, "[0-9]+.*$", "") %>% str_trim(),
day = factor(day,
c("m", "t", "w", "r", "f"),
c("m", "t", "w", "r", "f"),
ordered = T)) %>%
group_by(day, start, end, building) %>%
summarise(count = sum(enrolled)) %>%
arrange(day, start, building) %>%
ungroup() %>%
mutate(start = paste(Sys.Date(), start) %>% ymd_hm(),
end = paste(Sys.Date(), end) %>% ymd_hm()) -> intermediate
print(top_n)
if (!is.null(top_n)) {
top_list <- intermediate %>%
group_by(building) %>%
summarise(count = sum(count)) %>%
arrange(desc(count)) %$%
head(building, top_n)
intermediate %>%
filter(building %in% top_list) %>%
return()
}
} else if (by == "major") {
mutate(data,
major = str_replace(id, "[0-9-]+$", "") %>% str_trim(),
day = factor(day,
c("m", "t", "w", "r", "f"),
c("m", "t", "w", "r", "f"),
ordered = T)) %>%
group_by(day, start, end, major) %>%
summarise(count = sum(enrolled)) %>%
arrange(day, start, major) %>%
ungroup() %>%
mutate(start = paste(Sys.Date(), start) %>% ymd_hm(),
end = paste(Sys.Date(), end) %>% ymd_hm()) -> intermediate
if (!is.null(top_n)) {
top_list <- intermediate %>%
group_by(major) %>%
summarise(count = sum(count)) %>%
arrange(desc(count)) %$%
head(major, top_n)
intermediate %>%
filter(major %in% top_list) %>%
return()
}
}
if (is.null(top_n)) {
return(intermediate)
}
}
x %>% .$building %>% unique()
count_volume_by_day_time(data) -> x
mutate(data,
building = str_replace(location, "[0-9]+.*$", "") %>% str_trim(),
day = factor(day,
c("m", "t", "w", "r", "f"),
c("m", "t", "w", "r", "f"),
ordered = T)) %>%
group_by(day, start, end, building) %>%
summarise(count = sum(enrolled)) %>%
arrange(day, start, building) %>%
ungroup() %>%
mutate(start = paste(Sys.Date(), start) %>% ymd_hm(),
end = paste(Sys.Date(), end) %>% ymd_hm()) -> intermediate
if (!is.null(top_n)) {
top_list <- intermediate %>%
group_by(building) %>%
summarise(count = sum(count)) %>%
arrange(desc(count)) %$%
head(building, top_n)
intermediate %>%
filter(building %in% top_list) %>%
return()
}
count_volume_by_day_time(data, "building", 10) -> x
count_volume_by_day_time(data, "building", 10)
# input: data - the one that is outputed by clean_data_semester
#         by - either major or building
#         top_n - top n major or building based on total counts. if NULL return all
# return: data frame of counts by day and time, either by building or major
#         (showing the top_n of building or major)
count_volume_by_day_time <- function(data, by = "building", top_n = 10) {
# TODO: refactor by finding a way to call in the by
# variable in the group_by & arrange  statement
if (by == "building") {
mutate(data,
building = str_replace(location, "[0-9]+.*$", "") %>% str_trim(),
day = factor(day,
c("m", "t", "w", "r", "f"),
c("m", "t", "w", "r", "f"),
ordered = T)) %>%
group_by(day, start, end, building) %>%
summarise(count = sum(enrolled)) %>%
arrange(day, start, building) %>%
ungroup() %>%
mutate(start = paste(Sys.Date(), start) %>% ymd_hm(),
end = paste(Sys.Date(), end) %>% ymd_hm()) -> intermediate
if (!is.null(top_n)) {
top_list <- intermediate %>%
group_by(building) %>%
summarise(count = sum(count)) %>%
arrange(desc(count)) %$%
head(building, top_n)
intermediate %>%
filter(building %in% top_list) %>%
return()
} else {
return(intermediate)
}
} else if (by == "major") {
mutate(data,
major = str_replace(id, "[0-9-]+$", "") %>% str_trim(),
day = factor(day,
c("m", "t", "w", "r", "f"),
c("m", "t", "w", "r", "f"),
ordered = T)) %>%
group_by(day, start, end, major) %>%
summarise(count = sum(enrolled)) %>%
arrange(day, start, major) %>%
ungroup() %>%
mutate(start = paste(Sys.Date(), start) %>% ymd_hm(),
end = paste(Sys.Date(), end) %>% ymd_hm()) -> intermediate
if (!is.null(top_n)) {
top_list <- intermediate %>%
group_by(major) %>%
summarise(count = sum(count)) %>%
arrange(desc(count)) %$%
head(major, top_n)
intermediate %>%
filter(major %in% top_list) %>%
return()
} else {
return(intermediate)
}
}
}
count_volume_by_day_time(data, "building", 10)
?graph_from_data_frame
saveRDS(m, "./temp/mat.RDS")
